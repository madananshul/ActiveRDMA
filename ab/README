##############################################
# Benchmark  to exercise a file system       #
# Mods for non-Sun machines: 30 Aug 1989     #
#             replaced bres.s by bres.c      #
#             added $(COMPILER) to Makefile  # 
# Original Version: 14 June 1985             #
#					     #
#	M. Satyanarayanan		     #
#	School of Computer Science	     #
#	Carnegie-Mellon University	     #
##############################################




			CONDITIONS OF DISTRIBUTION
			==========================

By using this benchmark you and your organization (i.e., company or university)
implicitly agree to the following conditions:

	1. You will not distribute the benchmark outside your organization.

	2. You will not refer to this benchmark as the "Andrew benchmark" if you
	   modify it in any significant way.

	3. You will acknowledge the author and CMU in reporting results based on
           the benchmark or derivatives.

				  USAGE
				  =====
I have used this benchmark extensively as a standard for comparing Unix file system performance.
The benchmark has been run on Unix 4.xBSD and should run without modification on 
other versions of Unix, though I have not actually confirmed this.  It has run successfully  on Suns,
Microvaxes, IBM-RTs, DEC-5000s, Intel 386's, etc.

Sites outside CMU  may freely use this benchmark provided a brief acknowledgement is made of
the author and CMU in reporting results.

All the files involved in the benchmark are within the subdirectory fscript.  The ONLY external
files needed are the executable modules for the programs  such as cc, make, find, etc.  

There are number of phases to the benchmark, each exercising a different aspect of the file system:
	1. Phase I:   many subdirectories are recursively created.
	2. Phase II:  stresses the file system's ability to transfer large amounts of data by
			copying files.
	3. Phase III: recursively examines the status of every file in fscript, without actually
		      examining the data in the files.
	4. Phase IV:  examines every byte of every file in fscript.
	5. Phase V:   is computationally intensive.

The output of the benchmark contains embedded timestamps after each phase, and these are used to
calculate the time taken for the individual phases and the overall benchmark time.  Depending on
the file system you are benchmarking, you may also have auxiliary instrumentation to give you
detailied data on the file system during the benchmark.

When running this benchmark be sure to replicate each experiment a number of times to obtain
mean and standard deviations.  I  have seen significant variability in  experiments, especially
when the file system in question makes network accesses.


The instructions for running the benchmark are at the beginning of Makefile.


A good citation for this benchmark as well as a detailed example of its use is the following:
	"Scale and Performance in a Distributed File System"
	Howard, J.H., Kazar, M.L., Menees, S.G., Nichols, D.A., Satyanarayanan, M., 
		Sidebotham, R.N., West, M.J.
	ACM Transactions on Computer Systems, 6(1), February 1988.


